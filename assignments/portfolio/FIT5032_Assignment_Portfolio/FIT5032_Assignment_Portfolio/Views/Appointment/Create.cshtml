*@model FIT5032_Assignment_Portfolio.Models.CreateAppointmentViewModel


@{
    ViewBag.Title = "Create";
}

<div class="container create-appointment">
    <h2>Create</h2>

    <h4>Student</h4>
    <hr />

    @using (Html.BeginForm("Create", "Appointment", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <label class="control-label">Chosen Client</label>
            <div class="">
                @Html.EditorFor(model => model.ChosenClientEmail, new { htmlAttributes = new { @id = "chosenClientEmail", @class = "form-control", @list = "userClientOptions" } })
                <datalist id="userClientOptions">
                    @foreach (var client in Model.ClientsArray)
                    {
                        <option value="@client.Email"></option>
                    }
                </datalist>
                @Html.ValidationMessageFor(model => model.ChosenClientEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.AppointedDateTimeStart, htmlAttributes: new { @class = "control-label" })
            <div class='datepicker' id='datetimepicker'>
                @Html.EditorFor(model => model.AppointedDateTimeStart, new { htmlAttributes = new { @id = "meeting-time", @type = "datetime-local", @name = "meeting-time", @class = "form-control" } })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.AppointedDateTimeEnd, htmlAttributes: new { @class = "control-label" })
            <div class='datepicker' id='datetimepicker'>
                @Html.EditorFor(model => model.AppointedDateTimeEnd, new { htmlAttributes = new { @id = "meeting-time", @type = "datetime-local", @name = "meeting-time", @class = "form-control" } })
            </div>
        </div>

        <div class="form-group map-form-group">
            <div id="dataTable_filter" class="dataTables_filter map-form-label">
                <label>Location:</label>
                @Html.EditorFor(model => model.AppointedLocationName, new { htmlAttributes = new { @id = "searchInput", @type = "search", @class = "form-control", @aria_controls = "dataTable", @list = "searchInputAutoComplete" } })
                <datalist id="searchInputAutoComplete">
                </datalist>
            </div>
            <div class="map-container">
                <div class="map" id="map"></div>
            </div>
            <div class="map-coordinates">
                <div class="">
                    @Html.LabelFor(model => model.AppointedLocationLat, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AppointedLocationLat, new { htmlAttributes = new { @id = "latInput", @type = "text", @class = "form-control" } })
                </div>
                <div class="">
                    @Html.LabelFor(model => model.AppointedLocationLong, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.AppointedLocationLong, new { htmlAttributes = new { @id = "longInput", @type = "text", @class = "form-control" } })
                </div>
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            <div class="">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-8">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
    <script>

        const searchInputAutoComplete = document.getElementById("searchInputAutoComplete");
        const latField = document.getElementById("latInput");
        const longField = document.getElementById("longInput");
        const access_token = 'pk.eyJ1IjoiZXNoZTAwMDciLCJhIjoiY2p1MHR3bXNwMXZpMDN6bWY2ZjkzOWZ1aCJ9.5RrkJBHJgjCKrhll6_5f1Q'
        const searchInputTag = document.getElementById("searchInput");
        const chosenClientTag = document.getElementById("chosenClientEmail");
        const meetingTimeTag = document.getElementById("meeting-time");

        var isoDateString = (new Date()).toISOString().substring(0, 16);
        meetingTimeTag.min = isoDateString;
        meetingTimeTag.value = isoDateString;

        mapboxgl.accessToken = access_token;
        const map = new mapboxgl.Map({
            container: 'map', // container ID
            // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
            style: 'mapbox://styles/mapbox/streets-v11', // style URL
            center: [-74.5, 40], // starting position [lng, lat]
            zoom: 5, // starting zoom
            projection: 'globe' // display the map as a 3D globe
        });

        var marker;

        function setCoordinates(coordinates) {
            console.log("RUN");
            latField.value = coordinates[0];
            longField.value = coordinates[1];
            console.log(coordinates);
        }

        const searchAndDisplay = () => {
            var searchInput = searchInputTag.value;
            console.log(searchInput);
            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${searchInput}.json?access_token=${access_token}`)
                .then((response) => response.json())
                .then((data) => {
                    searchInputAutoComplete.innerHTML = "";
                    for (var i = 0; i < data.features.length; i++) {
                        var name = data.features[i].place_name;
                        var coordinates = data.features[i].geometry.coordinates;
                        console.log(coordinates);
                        var optionTag = document.createElement("option");
                        optionTag.value = name;
                        optionTag.onclick = setCoordinates(coordinates);
                        searchInputAutoComplete.appendChild(optionTag);

                        // Remove Existing Marker and Set marker options.
                        if (marker != null) {
                            marker.remove();
                        }
                        marker = new mapboxgl.Marker({
                            color: "red",
                            //draggable: true
                        }).setLngLat(coordinates).addTo(map);

                        map.setCenter(coordinates);

                    }
                });
        }


        var searchAndDisplayTimeout;
        searchInputTag.addEventListener("keyup", () => {
            if (searchAndDisplayTimeout != null) {
                clearTimeout(searchAndDisplayTimeout);
            }
            searchAndDisplayTimeout = setTimeout(searchAndDisplay, 2000);
        });

        map.on('style.load', () => {
            map.setFog({}); // Set the default atmosphere style
        });
    </script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        $(function () {
            $("#datepicker").datepicker({

            }).datepicker("setDate", new Date());
        });
    </script>
    <script type="text/javascript" src="/Scripts/jquery-3.4.1.min.js" defer></script>
    <script type="text/javascript" src="/Scripts/moment.min.js" defer></script>
    <script type="text/javascript" src="/Scripts/bootstrap.min.js" defer></script>
    <script type="text/javascript" src="/Scripts/bootstrap-datetimepicker.js" defer></script>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
